# Bean Validation (JSR-303)
javax.validation.constraints.AssertFalse.message = must be false
javax.validation.constraints.AssertTrue.message  = must be true
javax.validation.constraints.DecimalMax.message  = must be less than or equal to {value}
javax.validation.constraints.DecimalMin.message  = must be greater than or equal to {value}
javax.validation.constraints.Digits.message      = numeric value out of bounds (<{integer} digits>.<{fraction} digits> expected)
javax.validation.constraints.Future.message      = must be in the future
javax.validation.constraints.Max.message         = must be less than or equal to {value}
javax.validation.constraints.Min.message         = must be greater than or equal to {value}
javax.validation.constraints.NotNull.message     = may not be null
javax.validation.constraints.Null.message        = must be null
javax.validation.constraints.Past.message        = must be in the past
javax.validation.constraints.Pattern.message     = must match "{regexp}"
javax.validation.constraints.Size.message        = size must be between {min} and {max}

# Hibernate Validator
org.hibernate.validator.constraints.CreditCardNumber.message = invalid credit card number
org.hibernate.validator.constraints.Email.message            = not a well-formed email address
org.hibernate.validator.constraints.Length.message           = length must be between {min} and {max}
org.hibernate.validator.constraints.ModCheck.message         = invalid number
org.hibernate.validator.constraints.NotBlank.message         = may not be empty
org.hibernate.validator.constraints.NotEmpty.message         = may not be empty
org.hibernate.validator.constraints.Range.message            = must be between {min} and {max}
org.hibernate.validator.constraints.SafeHtml.message         = may have unsafe html content
org.hibernate.validator.constraints.ScriptAssert.message     = script expression "{script}" didn't evaluate to true
org.hibernate.validator.constraints.URL.message              = must be a valid URL

# DukeNavire Validation ErrorMessages (The code is defined by "message() default {val}" in @interface Class.)
dukenavire.validation.constraints.DNValidTelephoneNumber.message   = not a well-formed telephone number
dukenavire.validation.constraints.DNValidByteFixed.message         = must be {length} bytes
dukenavire.validation.constraints.DNValidByteMax.message           = must be less than or equal to {max}
dukenavire.validation.constraints.DNValidByteMin.message           = must be greater than or equal to {min}
dukenavire.validation.constraints.DNValidByteRange.message         = bytes must be between {min} and {max}
dukenavire.validation.constraints.DNValidCompareFields.message     = {originFieldName} and {confirmFieldName} must match compare rule 
dukenavire.validation.constraints.DNValidDateTimeFormat.message    = must input an effective date
dukenavire.validation.constraints.DNValidCompareDateFuture.message = {targetName} must be in the future from {basisName}
dukenavire.validation.constraints.DNValidCompareDatePast.message   = {targetName} must be in the past from {basisName}

# Type Mismatch
typeMismatch.short                  = must be integer number
typeMismatch.java.lang.Short        = must be integer number
typeMismatch.int                    = must be integer number
typeMismatch.java.lang.Integer      = must be integer number
typeMismatch.long                   = must be integer number
typeMismatch.java.lang.Long         = must be integer number
typeMismatch.float                  = must be floating point number
typeMismatch.java.lang.Float        = must be floating point number
typeMismatch.double                 = must be floating point number
typeMismatch.java.lang.Double       = must be floating point number
#typeMismatch.boolean                = must be true or false
#typeMismatch.java.lang.Boolean      = must be true or false
typeMismatch.java.sql.Timestamp     = must be datetime format
typeMismatch.org.joda.time.DateTime = must be datetime format
typeMismatch.java.math.BigDecimal   = must be number
# All Purpose Type Mismatch
typeMismatch                        = invalid input
